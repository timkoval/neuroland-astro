---
import { Icon } from "astro-icon/components";
import Tooltip from "./Tooltip.astro";

interface Props {
	href: string;
	noStyling?: boolean;
	notes?: string;
}

const { href, noStyling, notes } = Astro.props;

const isExternal = href.startsWith("http");
const linkColor = isExternal
	? "var(--flexoki-magenta-600)"
	: "var(--color-medium-sea-blue)";
const hoverColor = isExternal
	? "var(--color-dark-sea-blue)"
	: "var(--color-crimson)";
---

<Tooltip>
	<a
		class="link"
		style={{
			"--link-color": linkColor,
			"--link-hover-color": hoverColor,
			"--text-decoration": noStyling ? "none" : "underline",
		}}
		href={href}
		data-internal={!isExternal}
		data-no-styling={noStyling}><slot /></a
	><div slot="content">
		{
			notes && (
				<>
					<div class="notes">{notes}</div>
					<div class="divider" />
				</>
			)
		}<a class="external-url" href={href}>
			<span>{href}</span>
			{
				isExternal && (
					<span class="icon-wrapper">
						<svg
							width="18"
							height="18"
							viewBox="0 0 24 24"
							fill="none"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								d="M10 6H6C4.89543 6 4 6.89543 4 8V18C4 19.1046 4.89543 20 6 20H16C17.1046 20 18 19.1046 18 18V14M14 4H20M20 4V10M20 4L10 14"
								stroke="currentColor"
								stroke-width="2"
								stroke-linecap="round"
								stroke-linejoin="round"
							/>
						</svg>
					</span>
				)
			}
		</a>
	</div>
</Tooltip>

<style>
	.link {
		display: inline;
		cursor: pointer;
		position: relative;
		white-space: normal;
		outline: none;
		text-decoration: none;
		word-break: break-word;
		overflow-wrap: break-word;
		color: var(--link-color);
		transition: color 0.2s ease-in-out;
	}

	.link:focus {
		outline: 2px solid darkblue;
		border-radius: 2px;
	}

	.link:hover {
		color: var(--link-hover-color);
		transform: translate3d(0, -1px, 0);
	}

	/* Pseudo-element styles */
	.link::before {
		@media (min-width: 550px) {
			content: "";
			display: inline-block;
			transform-origin: 50% 100%;
			background: var(--flexoki-300);
			transition:
				clip-path 0.3s,
				transform 0.3s cubic-bezier(0.2, 1, 0.8, 1);
			position: absolute;
			width: 100%;
			height: 1px;
			top: 105%;
			left: 0;
			pointer-events: none;
			clip-path: polygon(
				0% 0%,
				0% 100%,
				50% 100%,
				50% 0,
				50% 0,
				50% 100%,
				50% 100%,
				0 100%,
				100% 100%,
				100% 0%
			);
		}
	}

	.link[data-no-styling="true"]::before {
		display: none;
	}

	.link:hover::before {
		@media (min-width: 550px) {
			transform: translate3d(0, 3px, 0) scale3d(1, 2, 1);
			background: var(--link-hover-color);
			clip-path: polygon(
				0% 0%,
				0% 100%,
				50% 100%,
				50% 0,
				50% 0,
				50% 100%,
				50% 100%,
				0 100%,
				100% 100%,
				100% 0%
			);
		}
	}

	.external-url {
		color: var(--flexoki-600);
		transition: color 0.2s ease-in-out;
		word-break: break-word;
		overflow-wrap: break-word;
		max-width: 420px;
		display: flex;
		align-items: top;
		gap: 6px;
	}

	.external-url svg {
		margin: 0 !important;
		position: relative;
		top: 2px;
		color: var(--flexoki-300);
		flex-shrink: 0;
	}

	.external-url:hover {
		color: var(--flexoki-magenta-600);
	}

	.divider {
		width: calc(100% + 36px);
		height: 1px;
		background: var(--flexoki-300);
		margin: var(--space-xs) 0;
		margin-left: -18px;
		margin-right: -18px;
	}

	.notes {
		line-height: var(--leading-base);
		font-family: var(--font-sans);
		color: var(--flexoki-800);
		margin: 0;
		word-break: break-word;
		overflow-wrap: break-word;
	}
</style>
