---
interface Props {
	maxWidth?: string | number;
}

const { maxWidth = 400 } = Astro.props;
---

<span class="tooltip-trigger" data-maxwidth={maxWidth}>
	<slot />
	<template class="tooltip-content">
		<slot name="content" />
	</template>
</span>

<style is:global>
	.tippy-box[data-theme~="custom"] {
		font-family: var(--font-sans);
		font-size: var(--font-size-sm);
		line-height: var(--leading-snug);
		word-break: break-word;
		padding: var(--space-3xs);
		margin-bottom: var(--space-3xs);
		background-color: white;
		color: var(--flexoki-800);
		box-shadow: var(--box-shadow-md);
	}

	.tippy-box[data-theme~="custom"] * {
		font-family: var(--font-sans);
		font-size: var(--font-size-sm);
		line-height: var(--leading-snug);
		color: var(--flexoki-800);
	}

	.tippy-box[data-theme~="custom"] p {
		margin: 0;
	}

	.tippy-box[data-theme~="custom"] .tippy-arrow {
		color: white;
	}
</style>

<script>
	import tippy, { type Props } from "tippy.js";
	import "tippy.js/dist/tippy.css";
	import "tippy.js/animations/shift-away.css";

	function initializeTooltips() {
		// Destroy existing tooltips first
		const existingTooltips = document.querySelectorAll(".tooltip-trigger");
		existingTooltips.forEach((element) => {
			const instance = (element as any)._tippy;
			if (instance) {
				instance.destroy();
			}
		});

		// Initialize tooltips
		const tooltips = document.querySelectorAll(".tooltip-trigger");
		tooltips.forEach((element) => {
			const template = element.querySelector(
				".tooltip-content",
			) as HTMLTemplateElement;
			tippy(
				element as Element,
				{
					content: template.content.cloneNode(true),
					maxWidth: parseInt(element.getAttribute("data-maxwidth") || "320"),
					duration: 500,
					arrow: true,
					interactive: true,
					animation: "shift-away",
					allowHTML: true,
					theme: "custom",
					onCreate(instance) {
						// Force a DOM update after creation
						setTimeout(() => {
							instance.setContent(instance.props.content);
						}, 0);
					},
				} as Partial<Props>,
			);
		});
	}

	// Initialize on first load
	initializeTooltips();

	// Re-initialize after view transitions
	document.addEventListener("astro:after-swap", initializeTooltips);
</script>
