---
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
	src: string;
	alt?: string;
	width?: string | number;
	margin?: string;
	showalt?: boolean;
	sourceUrl?: string;
	sourceTitle?: string;
	framed?: boolean;
}

const {
	src,
	alt = "",
	width = 1100,
	margin,
	showalt = false,
	sourceUrl,
	sourceTitle,
	framed = false,
} = Astro.props;

const widthWithUnit = typeof width === "number" ? `${width}px` : width;

// Use glob import to get all images
const images = import.meta.glob<{ default: ImageMetadata }>("/src/images/**/*");

// If src is a string and starts with "/images", try to find it in the glob
const imageSrc =
	typeof src === "string" && src.startsWith("/images")
		? (await images["/src" + src]()).default
		: src;

// Define sizes attribute for responsive images
const sizes = "(max-width: 440px) 100vw, (max-width: 768px) 90vw, (max-width: 1024px) 85vw, 1100px";

// Modified GIF detection logic
const isGif = typeof src === "string" && src.toLowerCase().endsWith(".gif");
---

<figure class:list={["container", { framed }]} style={`margin: ${margin || ""}`}>
	<div
		class:list={["image-wrapper", { "image-frame": framed }]}
		style={`max-width: ${widthWithUnit}`}
	>
		{
			isGif ? (
				<img
					src={typeof imageSrc === "string" ? src : imageSrc.src}
					alt={alt}
					class="styled-image"
					loading="eager"
				/>
			) : (
				<Picture
					src={imageSrc as ImageMetadata}
					alt={alt}
					sizes={sizes}
					formats={["avif", "webp", "jpg"]}
					width={typeof width === "number" ? width : parseInt(width)}
					class="styled-image"
					loading="eager"
					decoding="async"
				/>
			)
		}
	</div>
	{
		showalt &&
			(sourceUrl ? (
				<figcaption>
					{alt} â€“ Source: <a href={sourceUrl}>{sourceTitle}</a>
				</figcaption>
			) : (
				<figcaption>{alt}</figcaption>
			))
	}
</figure>

<style>
	.container {
		grid-column: 1 / 4 !important;
		text-align: center;
		margin: var(--space-s) auto var(--space-l);
		max-width: inherit;
	}

	.image-wrapper {
		display: flex;
		justify-content: center;
		position: relative;
		width: 100%;
		margin: 0 auto;
		height: auto;
	}

	.image-wrapper::before {
		content: "";
		position: absolute;
		inset: 0;
		border-radius: var(--border-radius-sm);
		animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
	}

	@keyframes pulse {
		0%,
		100% {
			opacity: 0.1;
		}
		50% {
			opacity: 0.3;
		}
	}

	.styled-image {
		height: auto;
		width: 100%;
		max-width: 100%;
		margin: 0 auto !important;
		border-radius: var(--border-radius-sm);
		position: relative;
		z-index: 1;
		object-fit: contain;
		display: block;
	}

	.image-frame {
		border: 1px solid var(--flexoki-200);
		border-radius: var(--border-radius-base);
		box-shadow: var(--box-shadow-lg);
		margin-bottom: var(--space-xs);
		contain: content;
	}

	figcaption {
		font-family: var(--font-sans);
		font-size: var(--font-size-sm);
		color: var(--flexoki-600);
		line-height: 1.5;
		width: 100%;
		max-width: 800px;
		margin: var(--space-s) auto 0;
	}

	@media (max-width: 768px) {
		.container {
			margin: var(--space-s) auto;
		}
	}
</style>
