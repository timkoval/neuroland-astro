---
interface ImageData {
	src: string;
	alt: string;
}

interface Props {
	data: ImageData[];
	title?: string;
}

const { data, title } = Astro.props;

if (!data || data.length === 0) {
	throw new Error("GsapScroller component requires at least one image");
}
---

<div class="container">
	<div class="sticky-container">
		{title && <span class="title">{title}</span>}
		<div class="image-container">
			{
				data.map((img, i) => (
					<img
						class={i === 0 ? "scroll-image active" : "scroll-image"}
						data-index={i}
						alt={img.alt}
						src={img.src}
					/>
				))
			}
		</div>
	</div>
	<div class="trigger">
		{data.slice(1).map((_, i) => <div class="step" data-step={i} />)}
	</div>
</div>

<script>
	import scrollama from "scrollama";

	interface ScrollamaResponse {
		element: HTMLElement;
		index: number;
		direction: "up" | "down";
		progress: number;
	}

	let scroller: any;
	let images: NodeListOf<HTMLImageElement>;
	let isMobile = false;

	function checkMobile() {
		isMobile = window.matchMedia("(max-width: 768px)").matches;
		const html = document.documentElement;
		if (isMobile) {
			html.classList.add("is-mobile");
		} else {
			html.classList.remove("is-mobile");
		}
	}

	function handleStepProgress(response: ScrollamaResponse) {
		if (isMobile) return; // Don't handle transitions on mobile
		const { index, progress } = response;
		const currentImage = index;
		const nextImage = index + 1;
		const isLastStep = index === images.length - 2;

		images.forEach((img, i) => {
			if (isLastStep) {
				if (i === currentImage) {
					img.style.opacity = `${1 - progress}`;
				} else if (i === nextImage) {
					img.style.opacity = `${progress}`;
				} else {
					img.style.opacity = "0";
				}
			} else {
				if (i === currentImage) {
					img.style.opacity = `${1 - progress}`;
				} else if (i === nextImage) {
					img.style.opacity = `${progress}`;
				} else {
					img.style.opacity = "0";
				}
			}
		});
	}

	function initScrollama() {
		checkMobile();
		images = document.querySelectorAll(".scroll-image");

		if (!isMobile) {
			scroller = scrollama();
			scroller
				.setup({
					step: ".step",
					progress: true,
					offset: 0.8,
					debug: false,
				})
				.onStepProgress(handleStepProgress);
		}
	}

	// Initial setup
	initScrollama();

	// Handle resize
	const handleResize = () => {
		checkMobile();
		if (!isMobile && scroller) {
			scroller.resize();
		}
	};
	window.addEventListener("resize", handleResize);

	// Cleanup and reinit on view transitions
	document.addEventListener("astro:after-swap", initScrollama);
	document.addEventListener("astro:after-render", initScrollama);

	// Cleanup
	const cleanup = () => {
		scroller?.destroy();
		window.removeEventListener("resize", handleResize);
	};

	document.addEventListener("astro:before-swap", cleanup);
	document.addEventListener("astro:unmount", cleanup);
</script>

<style>
	.container {
		position: relative;
		grid-column: 1/4 !important;
		height: 400vh;
	}

	.sticky-container {
		position: sticky;
		top: 10vh;
		height: 80vh;
		width: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.trigger {
		position: relative;
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	.step {
		height: 150vh;
		opacity: 0;
		pointer-events: none;
	}

	.image-container {
		position: relative;
		width: 100%;
		max-width: 1300px;
		height: 80vh;
		margin: 0 auto;
		padding: 0 1rem;
	}

	.scroll-image {
		position: absolute;
		width: 100%;
		height: 100%;
		left: 0;
		top: 0;
		opacity: 0;
		object-fit: contain;
		border: 1px solid var(--flexoki-100);
		border-radius: 0.5rem;
		box-shadow: var(--box-shadow-sm);
	}

	.scroll-image.active {
		opacity: 1;
	}

	.title {
		position: absolute;
		top: 2rem;
		left: 50%;
		transform: translateX(-50%);
		font-family: var(--font-sans);
		font-size: var(--font-size-sm);
		color: var(--flexoki-800);
		font-weight: 400;
		text-align: center;
		z-index: 2;
	}

	@media (max-width: 768px) {
		.container {
			height: auto;
			padding: 2rem 0;
		}

		.sticky-container {
			position: static;
			height: auto;
			padding: 0 1rem;
		}

		.trigger {
			display: none;
		}

		.scroll-image {
			position: relative;
			margin-bottom: 2rem;
			opacity: 1 !important; /* Force opacity to ensure images are visible */
			height: auto;
			max-height: 70vh;
		}

		.image-container {
			height: auto;
			display: flex;
			flex-direction: column;
			gap: 2rem;
		}

		.title {
			position: relative;
			transform: none;
			left: 0;
			text-align: left;
			margin-bottom: 1rem;
		}
	}
</style>
